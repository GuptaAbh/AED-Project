/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Procurement;

import Business.Enterprise.Enterprise;
import Business.ExtendedClasses.MasterOrderCatalog;
import Business.ExtendedClasses.Order;
import Business.ExtendedClasses.OrderItem;
import Business.ExtendedClasses.ProcurementProduct;
import Business.ExtendedClasses.StringVerifier;
import Business.ExtendedClasses.SupplierMachine;
import Business.Organization.FinanceOrganization;
import Business.Organization.Organization;
import Business.Organization.ProcurementOrganization;
import Business.Organization.SupplierOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.ProcurementFinanceWorkRequest;
import java.awt.CardLayout;
import java.util.Date;
import javax.swing.InputVerifier;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Abhishek
 */
public class ProcuremenetAddProduct extends javax.swing.JPanel {

    /**
     * Creates new form ProcuremnetAddSupplier
     */
    private JPanel userProcessContainer;
    private UserAccount userAccount;
    private ProcurementOrganization organization;
    private Enterprise enterprise;
    private MasterOrderCatalog masterOrderCatalog;
    boolean isCheckedOut= false;
    private Order order;
    public ProcuremenetAddProduct(JPanel userProcessContainer, UserAccount account, Organization organization, Enterprise enterprise) {
        initComponents();    
        this.masterOrderCatalog = organization.getMoc();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.enterprise=enterprise;
        this.organization= (ProcurementOrganization)organization;
        populateSupplierProduct();
        addVerifiers();
        order = new Order();
    }

    private void addVerifiers() {
        InputVerifier stringVerifier = new StringVerifier();
        //SupplierNametxt.setInputVerifier(stringVerifier); 
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        productCatalog = new javax.swing.JTable();
        addtoCartButton6 = new javax.swing.JButton();
        quantitySpinner = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        orderTable = new javax.swing.JTable();
        btnCheckOut = new javax.swing.JButton();
        backJButton2 = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 204, 153));
        setMaximumSize(new java.awt.Dimension(1000, 700));

        productCatalog.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        productCatalog.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "Product Name", "Product ID", "Price", "Availability"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(productCatalog);

        addtoCartButton6.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        addtoCartButton6.setText("ADD TO CART");
        addtoCartButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addtoCartButton6ActionPerformed(evt);
            }
        });

        quantitySpinner.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        quantitySpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel5.setText("Quantity:");

        orderTable.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        orderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Product Name", "Price", "Quantity", "Total Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(orderTable);

        btnCheckOut.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnCheckOut.setText("CHECK OUT");
        btnCheckOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckOutActionPerformed(evt);
            }
        });

        backJButton2.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        backJButton2.setText("<< Back");
        backJButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(232, 232, 232)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel5)
                        .addGap(46, 46, 46)
                        .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(92, 92, 92)
                        .addComponent(addtoCartButton6)
                        .addGap(74, 74, 74))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(204, 204, 204)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(backJButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnCheckOut))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 580, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(282, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addtoCartButton6)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(104, 104, 104)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(66, 66, 66)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCheckOut)
                    .addComponent(backJButton2))
                .addContainerGap(348, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addtoCartButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addtoCartButton6ActionPerformed
        // TODO add your handling code here:
        
        int selectedRow= productCatalog.getSelectedRow();
        SupplierMachine selectedProduct;
        System.out.println("inside");
        

        if(selectedRow<0){
            JOptionPane.showMessageDialog(this, "select a row first");
            return;
        }
        else{
            selectedProduct= (SupplierMachine)productCatalog.getValueAt(selectedRow, 0);
        }
        int fetchedQuantity= (Integer)quantitySpinner.getValue();
        if(fetchedQuantity<0){
            JOptionPane.showMessageDialog(this, "Select atleast one quantity","Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }else if(fetchedQuantity<=selectedProduct.getQuantity()){
            boolean alreadyPresent=false;
            System.out.println(order.getOrderItems().size());
            for(OrderItem orderItem: order.getOrderItems()){
                if(orderItem.getProduct()==selectedProduct){
                    int oldAvail= selectedProduct.getQuantity();
                    int newAvail= oldAvail- fetchedQuantity;
                    selectedProduct.setQuantity(newAvail);
                    System.out.println("SDOOlol1");
                    orderItem.setQuantity((fetchedQuantity+ orderItem.getQuantity()));
                    alreadyPresent= true;
                    refreshOrderTable();
                    populateSupplierProduct();
                }
            }
            if(!alreadyPresent){
                    int oldAvail= selectedProduct.getQuantity();
                    int newAvail= oldAvail- fetchedQuantity;
                    selectedProduct.setQuantity(newAvail);
                    System.out.println(selectedProduct+"ram "+fetchedQuantity+" ram "+selectedProduct.getMachinePrice());
                    order.addOrderItem(selectedProduct,fetchedQuantity,selectedProduct.getMachinePrice());
                    refreshOrderTable();
                    populateSupplierProduct();
                }
            }
                else{
                    JOptionPane.showMessageDialog(this, "Quantity> availability","Warning", JOptionPane.WARNING_MESSAGE);

                }
        
        

    }//GEN-LAST:event_addtoCartButton6ActionPerformed

    private void btnCheckOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckOutActionPerformed
        // TODO add your handling code here:
        if(order.getOrderItems().size()>0){
            masterOrderCatalog.addOrder(order);
            isCheckedOut=true;
            JOptionPane.showMessageDialog(this, "order added succesfully");
            addProductToProcCatlog(order);
            int orderTotal =0;
            for(OrderItem oi:order.getOrderItems())
                {
            SupplierMachine p= oi.getProduct();
            orderTotal+= oi.getQuantity()*oi.getSalesPrice();
                }
            
            
            
            ProcurementFinanceWorkRequest pfwr = new ProcurementFinanceWorkRequest();
            pfwr.setTotalPrice(orderTotal);
            pfwr.setSender(userAccount);
            pfwr.setOrg(organization);
            pfwr.setMessage("Procured");
            pfwr.setRequestDate(new Date());
            pfwr.setRequestType("Proc to Fin");
            pfwr.setOrder(order);
            Organization org = null;
        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){
            
            if (organization instanceof FinanceOrganization){
                org = organization;
                break;
            }
        }
        if (org!=null){
            pfwr.setReceiverOrg(org);
            org.getWorkQueue().getWorkRequestList().add(pfwr);
            userAccount.getWorkQueue().getWorkRequestList().add(pfwr);
        JOptionPane.showMessageDialog(null,"Request sent to finance created" );
// TODO add your handling code here:
        }
        
            order= new Order();
            refreshOrderTable();
            populateSupplierProduct();
            
            
            
        }
        else{
            JOptionPane.showMessageDialog(this, "order not added as there are no items","Warning", JOptionPane.WARNING_MESSAGE);

        }
        
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnCheckOutActionPerformed

    private void backJButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButton2ActionPerformed

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addtoCartButton6;
    private javax.swing.JButton backJButton2;
    private javax.swing.JButton btnCheckOut;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable orderTable;
    private javax.swing.JTable productCatalog;
    private javax.swing.JSpinner quantitySpinner;
    // End of variables declaration//GEN-END:variables

    private void populateSupplierProduct() {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        Organization org = null;
        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){
            
            if (organization instanceof SupplierOrganization){
                org = organization;
                break;
            }
        }
        
        if (org!=null){
            
            DefaultTableModel model = (DefaultTableModel)productCatalog.getModel();
            model.setRowCount(0);
            for(SupplierMachine product : org.getSupplierMachineDir().getSuppmachineList())
            {
                 Object row[] = new Object[4];
            row[0] = product;
            row[1] = product.getMachineID();
            row[2] = product.getMachinePrice();
            row[3] = product.getQuantity();
            model.addRow(row);

            }       
        }
        
    }

    private void refreshOrderTable() {
        
        DefaultTableModel dtm= (DefaultTableModel)orderTable.getModel();
          dtm.setRowCount(0);
          System.out.println(order.getOrderItems().size());
          for(OrderItem oi: order.getOrderItems()){
              Object row[]= new Object[4];
              row[0]= oi;
              row[1]= oi.getSalesPrice();
              row[2]= oi.getQuantity();
              
              row[3]= oi.getSalesPrice()*oi.getQuantity();
              dtm.addRow(row);
          }
    }

    private void addProductToProcCatlog(Order order) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
         int orderTotal=0;
         
         ProcurementProduct pp = organization.getPpc().addProduct();
    for(OrderItem oi:order.getOrderItems())
        {
            
            SupplierMachine p= oi.getProduct();
            
            pp.setProductNName(p.getMachineName());
            pp.setProductAvail(oi.getQuantity());
            pp.setProductPrice(oi.getSalesPrice());
            orderTotal+= oi.getQuantity()*oi.getSalesPrice();
    }
     order.setOrderTotal(orderTotal);
    }    
}
