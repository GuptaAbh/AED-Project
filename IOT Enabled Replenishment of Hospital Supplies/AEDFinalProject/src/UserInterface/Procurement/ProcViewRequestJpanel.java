/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Procurement;

import Business.Enterprise.Enterprise;
import Business.ExtendedClasses.WorkRequestHistory;
import Business.ExtendedClasses.WorkRequestHistoryDir;
import Business.Organization.Organization;
import Business.Organization.ProcurementOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Abhishek
 */
public class ProcViewRequestJpanel extends javax.swing.JPanel {

    /**
     * Creates new form ProcViewRequestJpanel
     */
    private JPanel userProcessContainer;
    private UserAccount userAccount;
    private ProcurementOrganization procOrganization;
    private Enterprise enterprise;
    public ProcViewRequestJpanel(JPanel userProcessContainer, UserAccount account, Organization organization, Enterprise enterprise) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.enterprise=enterprise;
        this.procOrganization= (ProcurementOrganization) organization;
        populateworkRequestJTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        assignJButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        backJButton2 = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 204, 153));
        setMaximumSize(new java.awt.Dimension(1000, 600));

        workRequestJTable.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Message", "Receiver", "Status", "Requester", "Requester Organization", "Machine Name", "Machine Status", "Requested Date", "Resolution Date", "Total Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);

        assignJButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        assignJButton.setText("Assign to me");
        assignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignJButtonActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton1.setText("Process and Send");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        backJButton2.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        backJButton2.setText("<< Back");
        backJButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 976, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(118, 118, 118)
                .addComponent(backJButton2)
                .addGap(43, 43, 43)
                .addComponent(assignJButton)
                .addGap(64, 64, 64)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(assignJButton)
                    .addComponent(jButton1)
                    .addComponent(backJButton2))
                .addContainerGap(289, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void assignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignJButtonActionPerformed

        int selectedRow = workRequestJTable.getSelectedRow();
        if(selectedRow>=0)
            {
                
            WorkRequest request = (WorkRequest)workRequestJTable.getValueAt(selectedRow, 0);
            if(request.getReceiver()==null || request.equals("") || request.equals(null))
            {
            request.setReceiver(userAccount);
            request.setStatus("Pending with Procurement");
            request.setReceiverOrg(procOrganization);
            request.setCurrentOwner(userAccount);
            request.setCurrentOwnerOrganzation(procOrganization);
            populateworkRequestJTable();
            WorkRequestHistoryDir wrhDir = request.getWrh();
            WorkRequestHistory wrh = wrhDir.addHistory();
            wrh.setAssignedDate(new Date());
            wrh.setReceiver(userAccount);
            wrh.setReceiverOrganization(procOrganization);
            }
            else
            {
                JOptionPane.showMessageDialog(this, "Request already Assigned to "+ request.getReceiver(), "Error", JOptionPane.ERROR_MESSAGE);
            }
            }
         else
            {
                JOptionPane.showMessageDialog(this, "Kindly select Any Row!!", "Error", JOptionPane.ERROR_MESSAGE);
            }

    }//GEN-LAST:event_assignJButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int selectedRow = workRequestJTable.getSelectedRow();
        if(selectedRow>=0)
        {
            
        WorkRequest request = (WorkRequest)workRequestJTable.getValueAt(selectedRow, 0);
        if(request.getReceiver()!=null)
        {
        ProcessRequestJPanel ProcessRequestJPanel = new ProcessRequestJPanel(userProcessContainer,userAccount,procOrganization,enterprise,request);
        userProcessContainer.add("ProcessRequestJPanel", ProcessRequestJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Kindly Assign the Request First!!", "Error", JOptionPane.ERROR_MESSAGE);
        }
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Kindly select Any Row!!", "Error", JOptionPane.ERROR_MESSAGE);
        }       
    }//GEN-LAST:event_jButton1ActionPerformed

    private void backJButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButton2ActionPerformed

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignJButton;
    private javax.swing.JButton backJButton2;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables

    public void populateworkRequestJTable() {

        DefaultTableModel model = (DefaultTableModel)workRequestJTable.getModel();
        model.setRowCount(0);
        for(WorkRequest request : procOrganization.getWorkQueue().getWorkRequestList())
        {
            if(request.getStatus().equalsIgnoreCase("Sent to Procurement") || request.getStatus().equalsIgnoreCase("Pending with Procurement"))
            {
            Object[] row = new Object[10];
            row[0] = request;
            row[1] = request.getCurrentOwner();
            row[2] = request.getStatus();
            row[3] = request.getSender();
            row[4] = request.getOrg();
            row[5] = request.getMachine();
            row[6] = request.getSensorStatusOld();
            row[7] = request.getRequestDate();
            row[8] = request.getResolveDate();
            row[9] = request.getTotalPrice();
            model.addRow(row);
            }
        }
    }
}
