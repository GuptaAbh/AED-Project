/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Department;

import Business.Enterprise.Enterprise;
import Business.ExtendedClasses.Machine;
import Business.ExtendedClasses.Supplier;
import Business.ExtendedClasses.SupplierMachine;
import Business.Organization.DepartmentOrganization;
import Business.Organization.FinanceOrganization;
import Business.Organization.Organization;
import Business.Organization.ProcurementOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.DepartmentFinanceWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Abhishek
 */
public class DepartmentPurchaseProductJPanel extends javax.swing.JPanel {

    /**
     * Creates new form DepartmentPurchaseProductJPanel
     */
    private JPanel userProcessContainer;
    private Organization organization;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private WorkRequest request;
    public DepartmentPurchaseProductJPanel(JPanel userProcessContainer,Organization organization,UserAccount account,Enterprise enterprise,WorkRequest request) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.organization = organization;
        this.enterprise = enterprise;
        this.userAccount = account;
        this.request = request;
        String machinePurpose = request.getMachine().getMachinePurpose();
        System.out.println(machinePurpose);
        populateProductTable(machinePurpose);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        SupplierProductjtable = new javax.swing.JTable();
        backJButton2 = new javax.swing.JButton();
        purchaseMachineBtn = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 204, 153));
        setPreferredSize(new java.awt.Dimension(1000, 700));

        SupplierProductjtable.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        SupplierProductjtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Supplier Name", "Product Name", "Available Quantity", "Price", "Product Purpose"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(SupplierProductjtable);

        backJButton2.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        backJButton2.setText("<< Back");
        backJButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButton2ActionPerformed(evt);
            }
        });

        purchaseMachineBtn.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        purchaseMachineBtn.setText("Purchase Machine");
        purchaseMachineBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                purchaseMachineBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(183, 183, 183)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 522, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(purchaseMachineBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(202, 202, 202)
                        .addComponent(backJButton2)))
                .addContainerGap(152, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(purchaseMachineBtn))
                .addGap(40, 40, 40)
                .addComponent(backJButton2)
                .addContainerGap(362, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backJButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButton2ActionPerformed

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButton2ActionPerformed

    private void purchaseMachineBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_purchaseMachineBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = SupplierProductjtable.getSelectedRow();
        if(selectedRow>=0)
        {
            Supplier supplier = (Supplier)(SupplierProductjtable.getValueAt(selectedRow,0));
            SupplierMachine suppliermachine = (SupplierMachine)(SupplierProductjtable.getValueAt(selectedRow,1));
            if(suppliermachine.getQuantity()>=1)
                    {
            suppliermachine.setQuantity(suppliermachine.getQuantity()-1);
            populateProductTable(suppliermachine.getMachinePurpose());
            
            Organization org = null;
            for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){
            if (organization instanceof DepartmentOrganization){
                org = organization;
                break;
                }
            }
            Machine m = org.getMachineDirectory().addMachine();
            m.setMachineName(suppliermachine.toString());
            m.setMachinePurpose(suppliermachine.getMachinePurpose());
           DepartmentFinanceWorkRequest dfWQ = new DepartmentFinanceWorkRequest();
           dfWQ.setOrg(organization);
           dfWQ.setSender(userAccount);
           dfWQ.setRequestType("DepttoFin");
           dfWQ.setRequestDate(new Date());
           dfWQ.setTotalPrice(suppliermachine.getMachinePrice());
           dfWQ.setStatus("Serviced");
           dfWQ.setMachine(m);
           dfWQ.setResolveDate(new Date());
           dfWQ.setMsgforFin("Product Purchased");
           
           Organization org1 = null;
            for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){
            if (organization instanceof FinanceOrganization){
                org1 = organization;
                break;
                }
            }
           
            if (org1!=null){
                System.out.println(org1 +"lkjhg");
            request.setCurrentOwnerOrganzation(org);
                System.out.println(org1.getWorkQueue().getWorkRequestList().size());
            org1.getWorkQueue().getWorkRequestList().add(dfWQ);
            userAccount.getWorkQueue().getWorkRequestList().add(dfWQ);
        }
            
           
           
                    }
            else
            {
                JOptionPane.showMessageDialog(null,"Product not present in the Store ");
            }
       
        
        }
        
       
               
    }//GEN-LAST:event_purchaseMachineBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable SupplierProductjtable;
    private javax.swing.JButton backJButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton purchaseMachineBtn;
    // End of variables declaration//GEN-END:variables

    private void populateProductTable(String purpose) {
        String machinePurpose = purpose;
        
        Organization org = null;
        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){
            if (organization instanceof ProcurementOrganization){
                org = organization;
                break;
            }
        }
        
        DefaultTableModel model = (DefaultTableModel) SupplierProductjtable.getModel();
        model.setRowCount(0);
        for(Supplier supplier: org.getSupplierDirectory().getSuppplierList())
            for(SupplierMachine supplierMachine: supplier.getSuppMachineList().getSuppmachineList())
            {
                if(supplierMachine.getMachinePurpose().contains(purpose))
                {
                    System.out.println("inside if");
                    Object[] row = new Object[7];
            row[0] = supplier;
            row[1] =supplierMachine;
            row[2] = supplierMachine.getQuantity();
            row[3] = supplierMachine.getMachinePrice();
            row[4] = supplierMachine.getMachinePurpose();
            model.addRow(row);
                
                }
            }
        
        
        
    }
}
