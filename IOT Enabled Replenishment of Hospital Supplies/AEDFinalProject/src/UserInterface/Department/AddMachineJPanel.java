/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Department;

import Business.Enterprise.Enterprise;
import Business.ExtendedClasses.Machine;
import Business.ExtendedClasses.MachineDirectory;
import Business.ExtendedClasses.StringVerifier;
import Business.Organization.DepartmentOrganization;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import javax.swing.InputVerifier;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Abhishek
 */
public class AddMachineJPanel extends javax.swing.JPanel {

    /**
     * Creates new form AddMachineJPanel
     */
    private JPanel userProcessContainer;
    private DepartmentOrganization org;
    private Enterprise enterprise;
    private UserAccount userAccount;
    public AddMachineJPanel(JPanel userProcessContainer, DepartmentOrganization organization, UserAccount account,Enterprise enterprise) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.org = organization;
        this.enterprise =enterprise;
        this.userAccount = account;
        populateTable();
        addVerifiers();
        
    }
    private void addVerifiers() {
        InputVerifier stringVerifier = new StringVerifier();
        jTextFieldMachineName.setInputVerifier(stringVerifier);
        jTextFieldMachineDescription.setInputVerifier(stringVerifier);
        jTextFieldMachinePurpose.setInputVerifier(stringVerifier);
                        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        MachineDetailjTable = new javax.swing.JTable();
        jTextFieldMachineName = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldMachineDescription = new javax.swing.JTextField();
        btnSave = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();
        btnAddSensor = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldMachinePurpose = new javax.swing.JTextField();

        setBackground(new java.awt.Color(0, 204, 153));
        setPreferredSize(new java.awt.Dimension(1000, 700));

        MachineDetailjTable.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        MachineDetailjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Machine ID", "Machine Name", "Machne Description", "Machine Purpose"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(MachineDetailjTable);
        if (MachineDetailjTable.getColumnModel().getColumnCount() > 0) {
            MachineDetailjTable.getColumnModel().getColumn(0).setResizable(false);
            MachineDetailjTable.getColumnModel().getColumn(1).setResizable(false);
            MachineDetailjTable.getColumnModel().getColumn(2).setResizable(false);
            MachineDetailjTable.getColumnModel().getColumn(3).setResizable(false);
        }

        jTextFieldMachineName.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jTextFieldMachineName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldMachineNameActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel1.setText("Machine Name");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel2.setText("Machine Description");

        jTextFieldMachineDescription.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jTextFieldMachineDescription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldMachineDescriptionActionPerformed(evt);
            }
        });

        btnSave.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        backJButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        btnAddSensor.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnAddSensor.setText("Add Sensor");
        btnAddSensor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddSensorActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel3.setText("Machine Purpose");

        jTextFieldMachinePurpose.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jTextFieldMachinePurpose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldMachinePurposeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(284, 284, 284)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(backJButton)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGap(7, 7, 7))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(64, 64, 64)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextFieldMachinePurpose, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
                            .addComponent(jTextFieldMachineName)
                            .addComponent(jTextFieldMachineDescription, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
                            .addComponent(btnSave)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(btnAddSensor)
                .addGap(0, 328, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(111, 111, 111)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnAddSensor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE))
                .addGap(142, 142, 142)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldMachineName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldMachineDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldMachinePurpose, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backJButton)
                    .addComponent(btnSave))
                .addGap(0, 277, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldMachineNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldMachineNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldMachineNameActionPerformed

    private void jTextFieldMachineDescriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldMachineDescriptionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldMachineDescriptionActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        try{
        String machineName = jTextFieldMachineName.getText();
        String machineDetails = jTextFieldMachineDescription.getText();
        String machinePurpose  = jTextFieldMachinePurpose.getText();
        if(machineName.trim().equals("") ||machineName.trim().equals(null))
        {
        JOptionPane.showMessageDialog(this, "Kindly Enter Machine Name", "Error", JOptionPane.ERROR_MESSAGE);
        
        }
        else
        {
        MachineDirectory macdir = org.getMachineDirectory();
        Machine machine = macdir.addMachine();
        machine.setMachineDetails(machineDetails.trim());
        machine.setMachineName(machineName.trim());
        machine.setMachinePurpose(machinePurpose.trim());
        //machine.setMachineID();
        jTextFieldMachineName.setText("");
        jTextFieldMachineDescription.setText("");
        jTextFieldMachinePurpose.setText("");
        populateTable();
        }
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
        
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnAddSensorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddSensorActionPerformed
        // TODO add your handling code here:
        try{
        int selectedRow = MachineDetailjTable.getSelectedRow();
        if(selectedRow>=0)
        {
            
        Machine machine = (Machine)(MachineDetailjTable.getValueAt(selectedRow,1));
        if(machine.isIsMachineActive()){
        AddSensorJPanel AddSensorJPanel = new AddSensorJPanel(userProcessContainer,machine,enterprise,userAccount,org);
        userProcessContainer.add("AddSensorJPanel", AddSensorJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
        }
        else
        {
            
            JOptionPane.showMessageDialog(this, "Machine is not used now", "Error", JOptionPane.ERROR_MESSAGE);
        }
        }
        else
        {
           JOptionPane.showMessageDialog(this, "Kindly select Any Row!!", "Error", JOptionPane.ERROR_MESSAGE);
        }
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
        
    }//GEN-LAST:event_btnAddSensorActionPerformed

    private void jTextFieldMachinePurposeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldMachinePurposeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldMachinePurposeActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable MachineDetailjTable;
    private javax.swing.JButton backJButton;
    private javax.swing.JButton btnAddSensor;
    private javax.swing.JButton btnSave;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextFieldMachineDescription;
    private javax.swing.JTextField jTextFieldMachineName;
    private javax.swing.JTextField jTextFieldMachinePurpose;
    // End of variables declaration//GEN-END:variables

    private void populateTable() {
        
        DefaultTableModel model = (DefaultTableModel) MachineDetailjTable.getModel();
        model.setRowCount(0);
        for (Machine machine : org.getMachineDirectory().getMachineList()) {
                Object[] row = new Object[4];
                row[0] = machine.getMachineID();
                row[1] = machine;
                row[2] = machine.getMachineDetails();
                row[3] = machine.getMachinePurpose();
                //row[4] = machine.isIsMachineActive();
                model.addRow(row);
            
        }
        
    }
}
